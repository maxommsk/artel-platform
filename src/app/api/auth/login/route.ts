import { NextRequest, NextResponse } from 'next/server';
import { verifyPassword, createToken, setAuthCookie } from '@/lib/auth';
import { User } from '@/lib/models';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–æ–∫–µ
interface MockUser {
  id: number;
  username: string;
  email: string;
  password_hash: string;
  created_at: string;
  updated_at: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–æ–ª–∏
interface Role {
  name: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function createMockDb() {
  console.log('Using enhanced mock database in login route');
  
  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–æ–∫–∞
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  const mockUsers: MockUser[] = [
    { 
      id: 1, 
      username: 'maxommsk@gmail.com', 
      email: 'maxommsk@gmail.com',
      password_hash: '$2a$10$XQxBGI0Vz8mGUx.j3UZBxeKFH9CCzZpHJoB1aP5RgXJJcBpHwFp2K', // —Ö–µ—à –¥–ª—è –ø–∞—Ä–æ–ª—è "password"
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    },
    { 
      id: 2, 
      username: 'maxi_trade@mail.ru', 
      email: 'maxi_trade@mail.ru',
      password_hash: '$2a$10$XQxBGI0Vz8mGUx.j3UZBxeKFH9CCzZpHJoB1aP5RgXJJcBpHwFp2K', // —Ö–µ—à –¥–ª—è –ø–∞—Ä–æ–ª—è "password"
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  ];
  
  return {
    prepare: (query: string) => ({
      bind: (...params: any[]) => ({
        all: async () => {
          // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏/email
          if (query.includes('SELECT * FROM users WHERE username')) {
            const username = params[0];
            console.log(`Searching for user with username: ${username}`);
            
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ email
            const user = mockUsers.find(u => 
              u.username.toLowerCase() === username.toLowerCase() || 
              u.email.toLowerCase() === username.toLowerCase()
            );
            
            if (user) {
              console.log(`User found: ${user.username}`);
              return { results: [user] };
            } else {
              console.log('User not found');
              return { results: [] };
            }
          }
          
          // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π
          if (query.includes('SELECT r.name FROM roles')) {
            const userId = params[0];
            console.log(`Getting roles for user ID: ${userId}`);
            
            // –í –º–æ–∫–µ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–æ–ª—å 'user'
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π –∏–∑ –ë–î
            return { results: [{ name: 'user' }] };
          }
          
          return { results: [] };
        }
      })
    })
  };
}

export async function POST(request: NextRequest) {
  try {
    interface LoginRequestBody {
      username: string;
      password: string;
    }

    const body = await request.json() as LoginRequestBody;
    const { username, password } = body;

    if (!username || !password) {
      return NextResponse.json({ success: false, message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' }, { status: 400 });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏–ª–∏ —Ä–µ–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –¥—Ä—É–≥–∏—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö
    const useMockDb = process.env.DB_MOCK === 'true';
    const db = useMockDb 
      ? createMockDb() 
      : (process.env as any).DB as D1Database;

    if (!db) throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');

    const { results } = await db.prepare(
      'SELECT * FROM users WHERE username = ?'
    ).bind(username).all();

    const user = results?.[0];
    if (!user) {
      return NextResponse.json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–ª–µ password_hash
    if (!('password_hash' in user)) {
      return NextResponse.json({ success: false, message: '–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }, { status: 500 });
    }
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ verifyPassword
    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ "password"
    const passwordMatch = await verifyPassword(password, user.password_hash as string);

    if (!passwordMatch) {
      return NextResponse.json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' }, { status: 401 });
    }

    const { results: rolesResults } = await db.prepare(`
      SELECT r.name FROM roles r
      JOIN user_roles ur ON r.id = ur.role_id
      WHERE ur.user_id = ?
    `).bind(user.id).all();

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ –∏–º–µ—é—Ç –ø–æ–ª–µ name
    const roles: Role[] = rolesResults.filter((r): r is Role => 'name' in r);
    const roleNames = roles.map(r => r.name);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ —Å –ø–æ–ª—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è createToken
    const tokenPayload = {
      id: user.id as number,
      username: user.username as string,
      roles: [
        roleNames.length > 0 
          ? { id: 1, name: roleNames[0] as string } 
          : { id: 1, name: 'user' }
      ]
    };
    
    const token = await createToken(tokenPayload, roleNames as string[]);
    
    await setAuthCookie(token);

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userWithoutPassword = { ...user };
    delete userWithoutPassword.password_hash;

    // –î–æ–±–∞–≤–ª—è–µ–º email –≤ –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    return NextResponse.json({
      success: true,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
      user: userWithoutPassword,
      token
    });
  } catch (error: any) {
    console.error('üî• –û—à–∏–±–∫–∞ –≤ /api/auth/login:', error);
    return NextResponse.json({ success: false, message: error?.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}

