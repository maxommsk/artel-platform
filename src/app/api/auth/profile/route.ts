import { NextRequest, NextResponse } from 'next/server';
import { verifyToken } from '@/lib/auth';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
interface ProfileUpdateRequest {
  first_name?: string;
  last_name?: string;
  middle_name?: string;
  phone?: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function createMockDb() {
  console.log('Using mock database in profile route');
  return {
    prepare: (query: string) => ({
      bind: (...params: any[]) => ({
        all: async () => {
          // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
          if (query.includes('SELECT * FROM users WHERE id')) {
            return { 
              results: [{ 
                id: params[0], 
                username: 'user' + params[0],
                email: `user${params[0]}@example.com`,
                first_name: '–ú–∞–∫—Å–∏–º',
                last_name: '–¶–≤–µ—Ç–∫–æ–≤',
                middle_name: '–Æ—Ä—å–µ–≤–∏—á',
                phone: '+79777707950',
                password_hash: '$2a$10$XQxBGI0Vz8mGUx.j3UZBxeKFH9CCzZpHJoB1aP5RgXJJcBpHwFp2K', // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ password_hash
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
              }] 
            };
          }
          return { results: [] };
        },
        run: async () => ({ 
          success: true, 
          meta: { last_row_id: 1 }
        })
      })
    })
  };
}

export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('Authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json({ success: false, message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, { status: 401 });
    }

    const token = authHeader.split(' ')[1];
    let userId: number;

    try {
      const decoded = await verifyToken(token);
      userId = decoded.id;
    } catch (error) {
      return NextResponse.json({ success: false, message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
    const body = await request.json() as ProfileUpdateRequest;
    const { first_name, last_name, middle_name, phone } = body;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏–ª–∏ —Ä–µ–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –¥—Ä—É–≥–∏—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö
    const useMockDb = process.env.DB_MOCK === 'true';
    const db = useMockDb 
      ? createMockDb() 
      : (process.env as any).DB as D1Database;

    if (!db) throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { results } = await db.prepare(
      'SELECT * FROM users WHERE id = ?'
    ).bind(userId).all();

    const user = results?.[0];
    if (!user) {
      return NextResponse.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.prepare(`
      UPDATE users 
      SET first_name = ?, last_name = ?, middle_name = ?, phone = ?, updated_at = ?
      WHERE id = ?
    `).bind(
      first_name || null,
      last_name || null,
      middle_name || null,
      phone || null,
      new Date().toISOString(),
      userId
    ).run();

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { results: updatedResults } = await db.prepare(
      'SELECT * FROM users WHERE id = ?'
    ).bind(userId).all();

    const updatedUser = updatedResults?.[0];
    if (!updatedUser) {
      return NextResponse.json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö' }, { status: 500 });
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const userWithoutPassword = { ...updatedUser };
    if ('password_hash' in userWithoutPassword) {
      delete userWithoutPassword.password_hash;
    }

    return NextResponse.json({
      success: true,
      message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      user: userWithoutPassword
    });
  } catch (error: any) {
    console.error('üî• –û—à–∏–±–∫–∞ –≤ /api/auth/profile:', error);
    return NextResponse.json({ success: false, message: error?.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}

