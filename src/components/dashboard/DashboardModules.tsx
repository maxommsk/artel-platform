'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';

interface ApplicationApiResponse {
  success?: boolean;
  message?: string;
  error?: string;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
export function TariffPlans() {
  const [selectedTariff, setSelectedTariff] = useState<number | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const router = useRouter();

  const tariffs = [
    {
      id: 1,
      name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç',
      description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω —Å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–º –≤–∑–Ω–æ—Å–æ–º 20%',
      initialPaymentPercent: 20,
      monthlyPaymentPercent: 0.5,
      maxTermMonths: 180,
      accelerationCoefficient: 0.01,
      color: 'blue'
    },
    {
      id: 2,
      name: '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π',
      description: '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω —Å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–º –≤–∑–Ω–æ—Å–æ–º 30%',
      initialPaymentPercent: 30,
      monthlyPaymentPercent: 0.7,
      maxTermMonths: 120,
      accelerationCoefficient: 0.015,
      color: 'green'
    },
    {
      id: 3,
      name: '–£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π',
      description: '–£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω —Å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–º –≤–∑–Ω–æ—Å–æ–º 50%',
      initialPaymentPercent: 50,
      monthlyPaymentPercent: 1.0,
      maxTermMonths: 60,
      accelerationCoefficient: 0.02,
      color: 'purple'
    }
  ];

  const handleSelectTariff = (tariffId: number) => {
    setSelectedTariff(tariffId);
  };

  const handleApplyForMembership = async () => {
    if (!selectedTariff) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω');
      return;
    }

    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const response = await fetch('/api/member/apply', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ tariff_id: selectedTariff }),
      });

      const data: ApplicationApiResponse = await response.json();

      if (!response.ok) {
        throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏');
      }

      setSuccess('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –ñ–ù–ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –ø–∞–π—â–∏–∫–æ–º.');
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–∞—à–±–æ—Ä–¥–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        router.push('/dashboard');
      }, 3000);
    } catch (err: any) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <h2 className="text-xl font-bold mb-6">–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –ñ–ù–ö "–ê—Ä—Ç–µ–ª—å"</h2>
      
      {error && (
        <div className="mb-4 p-3 bg-red-100 text-red-700 rounded">
          {error}
        </div>
      )}
      
      {success && (
        <div className="mb-4 p-3 bg-green-100 text-green-700 rounded">
          {success}
        </div>
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        {tariffs.map((tariff) => (
          <div 
            key={tariff.id}
            className={`border rounded-lg p-6 cursor-pointer transition-all ${
              selectedTariff === tariff.id 
                ? `border-${tariff.color}-500 bg-${tariff.color}-50 shadow-md` 
                : 'border-gray-200 hover:border-gray-300 hover:shadow'
            }`}
            onClick={() => handleSelectTariff(tariff.id)}
          >
            <div className={`text-${tariff.color}-600 font-bold text-xl mb-2`}>{tariff.name}</div>
            <p className="text-gray-600 mb-4">{tariff.description}</p>
            
            <div className="space-y-2">
              <div className="flex justify-between">
                <span className="text-gray-600">–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å:</span>
                <span className="font-medium">{tariff.initialPaymentPercent}%</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂:</span>
                <span className="font-medium">{tariff.monthlyPaymentPercent}%</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">–ú–∞–∫—Å. —Å—Ä–æ–∫ —Ä–∞—Å—Å—Ä–æ—á–∫–∏:</span>
                <span className="font-medium">{tariff.maxTermMonths} –º–µ—Å.</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">–ö–æ—ç—Ñ. —É—Å–∫–æ—Ä–µ–Ω–∏—è:</span>
                <span className="font-medium">{tariff.accelerationCoefficient}</span>
              </div>
            </div>
            
            <div className="mt-4 pt-4 border-t border-gray-200">
              <div className={`flex items-center ${
                selectedTariff === tariff.id ? 'visible' : 'invisible'
              }`}>
                <div className={`w-4 h-4 rounded-full bg-${tariff.color}-500 mr-2`}></div>
                <span className={`text-${tariff.color}-600 font-medium`}>–í—ã–±—Ä–∞–Ω</span>
              </div>
            </div>
          </div>
        ))}
      </div>
      
      <div className="flex justify-center">
        <button
          onClick={handleApplyForMembership}
          disabled={!selectedTariff || loading}
          className="bg-blue-500 text-white py-2 px-6 rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 disabled:opacity-50"
        >
          {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏...' : '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ'}
        </button>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
export function DocumentManagement() {
  const [documents, setDocuments] = useState([
    { id: 1, title: '–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ', status: '–ü–æ–¥–ø–∏—Å–∞–Ω', date: '2025-04-15', type: 'application' },
    { id: 2, title: '–î–æ–≥–æ–≤–æ—Ä –æ —á–ª–µ–Ω—Å—Ç–≤–µ', status: '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è', date: '2025-04-15', type: 'contract' },
    { id: 3, title: '–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –ø–∞–π—â–∏–∫–∞', status: '–ù–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω', date: '-', type: 'certificate' }
  ]);
  
  const getStatusClass = (status: string) => {
    switch (status) {
      case '–ü–æ–¥–ø–∏—Å–∞–Ω':
        return 'bg-green-100 text-green-800';
      case '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è':
        return 'bg-yellow-100 text-yellow-800';
      case '–ù–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω':
        return 'bg-gray-100 text-gray-800';
      default:
        return 'bg-blue-100 text-blue-800';
    }
  };
  
  const getDocumentIcon = (type: string) => {
    switch (type) {
      case 'application':
        return 'üìù';
      case 'contract':
        return 'üìÑ';
      case 'certificate':
        return 'üèÜ';
      default:
        return 'üìã';
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <h2 className="text-xl font-bold mb-6">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏</h2>
      
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                –î–æ–∫—É–º–µ–Ω—Ç
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                –°—Ç–∞—Ç—É—Å
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                –î–∞—Ç–∞
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                –î–µ–π—Å—Ç–≤–∏—è
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {documents.map((doc) => (
              <tr key={doc.id}>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="flex items-center">
                    <div className="text-xl mr-3">{getDocumentIcon(doc.type)}</div>
                    <div className="text-sm font-medium text-gray-900">{doc.title}</div>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusClass(doc.status)}`}>
                    {doc.status}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {doc.date}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  {doc.status === '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è' && (
                    <button className="text-blue-600 hover:text-blue-900 mr-4">
                      –ü–æ–¥–ø–∏—Å–∞—Ç—å
                    </button>
                  )}
                  {doc.status !== '–ù–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω' && (
                    <button className="text-gray-600 hover:text-gray-900">
                      –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
export function RoadmapVisualization() {
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã (–ø—Ä–∏–º–µ—Ä)
  const roadmapData = {
    targetAmount: 3000000, // –¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ (—Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏)
    initialPaymentPercent: 30, // –ü—Ä–æ—Ü–µ–Ω—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞
    initialPaymentAmount: 900000, // –°—É–º–º–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞
    currentAmount: 450000, // –¢–µ–∫—É—â–∞—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞
    monthlyPayment: 30000, // –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    estimatedQueueDate: '2025-10-15', // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –¥–∞—Ç–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å
    estimatedAcquisitionDate: '2026-04-20', // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –¥–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    accelerationPoint: 15, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–∞–π—â–∏–∫–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    milestones: [
      { percent: 0, label: '–ù–∞—á–∞–ª–æ', reached: true },
      { percent: 15, label: '15%', reached: true },
      { percent: 30, label: '–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å', reached: false },
      { percent: 50, label: '50%', reached: false },
      { percent: 75, label: '75%', reached: false },
      { percent: 100, label: '–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', reached: false }
    ]
  };

  // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  const progressPercent = Math.round((roadmapData.currentAmount / roadmapData.initialPaymentAmount) * 100);
  
  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <h2 className="text-xl font-bold mb-6">–î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <div>
          <h3 className="text-lg font-semibold mb-4">–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h3>
          
          <div className="space-y-4">
            <div>
              <div className="flex justify-between mb-1">
                <span className="text-gray-700">–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞</span>
                <span className="text-blue-600 font-medium">{progressPercent}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2.5">
                <div className="bg-blue-600 h-2.5 rounded-full" style={{ width: `${progressPercent}%` }}></div>
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <p className="text-gray-600">–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:</p>
                <p className="font-medium">{roadmapData.targetAmount.toLocaleString()} ‚ÇΩ</p>
              </div>
              <div>
                <p className="text-gray-600">–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å ({roadmapData.initialPaymentPercent}%):</p>
                <p className="font-medium">{roadmapData.initialPaymentAmount.toLocaleString()} ‚ÇΩ</p>
              </div>
              <div>
                <p className="text-gray-600">–ù–∞–∫–æ–ø–ª–µ–Ω–æ:</p>
                <p className="font-medium">{roadmapData.currentAmount.toLocaleString()} ‚ÇΩ</p>
              </div>
              <div>
                <p className="text-gray-600">–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å:</p>
                <p className="font-medium">{(roadmapData.initialPaymentAmount - roadmapData.currentAmount).toLocaleString()} ‚ÇΩ</p>
              </div>
              <div>
                <p className="text-gray-600">–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂:</p>
                <p className="font-medium">{roadmapData.monthlyPayment.toLocaleString()} ‚ÇΩ</p>
              </div>
              <div>
                <p className="text-gray-600">–¢–æ—á–∫–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è:</p>
                <p className="font-medium">{roadmapData.accelerationPoint} –Ω–æ–≤—ã—Ö –ø–∞–π—â–∏–∫–æ–≤</p>
              </div>
            </div>
          </div>
        </div>
        
        <div>
          <h3 className="text-lg font-semibold mb-4">–ö–ª—é—á–µ–≤—ã–µ –¥–∞—Ç—ã</h3>
          
          <div className="space-y-6">
            <div className="relative">
              <div className="absolute left-3 top-0 bottom-0 w-0.5 bg-gray-200"></div>
              
              {roadmapData.milestones.map((milestone, index) => (
                <div key={index} className="relative pl-10 pb-6">
                  <div className={`absolute left-0 w-6 h-6 rounded-full ${
                    milestone.reached ? 'bg-green-500' : 'bg-gray-300'
                  } flex items-center justify-center`}>
                    {milestone.reached && (
                      <svg className="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                      </svg>
                    )}
                  </div>
                  <div>
                    <h4 className="text-md font-medium">{milestone.label}</h4>
                    {milestone.label === '–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å' && (
                      <p className="text-sm text-gray-500">–û–∂–∏–¥–∞–µ—Ç—Å—è {roadmapData.estimatedQueueDate}</p>
                    )}
                    {milestone.label === '–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏' && (
                      <p className="text-sm text-gray-500">–û–∂–∏–¥–∞–µ—Ç—Å—è {roadmapData.estimatedAcquisitionDate}</p>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
      
      <div className="bg-blue-50 p-4 rounded-lg">
        <h3 className="text-lg font-semibold mb-2">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å–∫–æ—Ä–µ–Ω–∏—é</h3>
        <ul className="list-disc pl-5 space-y-2">
          <li>–£–≤–µ–ª–∏—á—å—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è</li>
          <li>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –Ω–æ–≤—ã—Ö –ø–∞–π—â–∏–∫–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–æ—á–∫–∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è</li>
          <li>–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–Ω–µ—Å–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∑–Ω–æ—Å–æ–≤</li>
        </ul>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö
export function TokensInfo() {
  // –î–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–∞—Ö (–ø—Ä–∏–º–µ—Ä)
  const tokensData = {
    totalTokens: 45,
    tokenPrice: 100000,
    tokenTypes: [
      { type: '–ú–ö-–ù', count: 30, value: 3000000 },
      { type: '–ú–ö-–ñ', count: 10, value: 1000000 },
      { type: '–ú–ö-–†', count: 5, value: 500000 }
    ],
    transactions: [
      { id: 1, date: '2025-04-10', type: '–í—ã–ø—É—Å–∫', tokenType: '–ú–ö-–ù', amount: 10, value: 1000000 },
      { id: 2, date: '2025-04-15', type: '–í—ã–ø—É—Å–∫', tokenType: '–ú–ö-–ù', amount: 20, value: 2000000 },
      { id: 3, date: '2025-04-20', type: '–í—ã–ø—É—Å–∫', tokenType: '–ú–ö-–ñ', amount: 10, value: 1000000 },
      { id: 4, date: '2025-04-25', type: '–í—ã–ø—É—Å–∫', tokenType: '–ú–ö-–†', amount: 5, value: 500000 }
    ]
  };
  
  const getTokenTypeColor = (type: string) => {
    switch (type) {
      case '–ú–ö-–ù':
        return 'bg-blue-100 text-blue-800';
      case '–ú–ö-–ñ':
        return 'bg-green-100 text-green-800';
      case '–ú–ö-–†':
        return 'bg-purple-100 text-purple-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };
  
  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <h2 className="text-xl font-bold mb-6">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        {tokensData.tokenTypes.map((tokenType, index) => (
          <div key={index} className="border rounded-lg p-6">
            <div className={`inline-block px-2 py-1 rounded-full text-sm font-semibold mb-4 ${getTokenTypeColor(tokenType.type)}`}>
              {tokenType.type}
            </div>
            <div className="text-2xl font-bold mb-2">{tokenType.count} —Ç–æ–∫–µ–Ω–æ–≤</div>
            <div className="text-gray-600">{tokenType.value.toLocaleString()} ‚ÇΩ</div>
          </div>
        ))}
      </div>
      
      <div className="mb-8">
        <h3 className="text-lg font-semibold mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏</h3>
        <div className="bg-gray-50 p-4 rounded-lg">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <p className="text-gray-600">–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞:</p>
              <p className="font-medium">{tokensData.tokenPrice.toLocaleString()} ‚ÇΩ</p>
            </div>
            <div>
              <p className="text-gray-600">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤:</p>
              <p className="font-medium">{(tokensData.totalTokens * tokensData.tokenPrice).toLocaleString()} ‚ÇΩ</p>
            </div>
          </div>
        </div>
      </div>
      
      <div>
        <h3 className="text-lg font-semibold mb-4">–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</h3>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –î–∞—Ç–∞
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –¢–∏–ø —Ç–æ–∫–µ–Ω–∞
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –°—Ç–æ–∏–º–æ—Å—Ç—å
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {tokensData.transactions.map((tx) => (
                <tr key={tx.id}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {tx.date}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {tx.type}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getTokenTypeColor(tx.tokenType)}`}>
                      {tx.tokenType}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {tx.amount}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {tx.value.toLocaleString()} ‚ÇΩ
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
